# Generated by Django 4.0.6 on 2022-08-01 05:10

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Название')),
                ('text', models.TextField(null=True, verbose_name='Текст')),
                ('paid', models.BooleanField(default=False, verbose_name='Платный')),
                ('main_image', models.ImageField(upload_to='post/img/', verbose_name='Основное фото')),
                ('date', models.DateField(default=django.utils.timezone.now, verbose_name='Дата Публикации')),
                ('youtube_url', models.CharField(blank=True, max_length=150, null=True, verbose_name='Ютуб Ссылка')),
                ('draft', models.BooleanField(default=False, verbose_name='Черновик')),
            ],
            options={
                'verbose_name': 'Мероприятия',
                'verbose_name_plural': 'Мероприятия',
            },
        ),
        migrations.CreateModel(
            name='News',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Название')),
                ('text', models.TextField(null=True, verbose_name='Текст')),
                ('paid', models.BooleanField(default=False, verbose_name='Платный')),
                ('main_image', models.ImageField(upload_to='post/img/', verbose_name='Основное фото')),
                ('date', models.DateField(default=django.utils.timezone.now, verbose_name='Дата Публикации')),
                ('youtube_url', models.CharField(blank=True, max_length=150, null=True, verbose_name='Ютуб Ссылка')),
                ('draft', models.BooleanField(default=False, verbose_name='Черновик')),
            ],
            options={
                'verbose_name': 'Новость',
                'verbose_name_plural': 'Новости',
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Название')),
                ('text', models.TextField(null=True, verbose_name='Текст')),
                ('paid', models.BooleanField(default=False, verbose_name='Платный')),
                ('main_image', models.ImageField(upload_to='post/img/', verbose_name='Основное фото')),
                ('date', models.DateField(default=django.utils.timezone.now, verbose_name='Дата Публикации')),
                ('youtube_url', models.CharField(blank=True, max_length=150, null=True, verbose_name='Ютуб Ссылка')),
                ('draft', models.BooleanField(default=False, verbose_name='Черновик')),
                ('category', models.CharField(max_length=50, verbose_name='Категория')),
                ('tags', models.CharField(max_length=50, verbose_name='Теги')),
            ],
            options={
                'verbose_name': 'Запись',
                'verbose_name_plural': 'Записи',
            },
        ),
        migrations.CreateModel(
            name='Post_Images',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='post/img', verbose_name='фото')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='acpm.post')),
            ],
            options={
                'verbose_name': 'Фото',
                'verbose_name_plural': 'Фото',
            },
        ),
        migrations.CreateModel(
            name='News_Images',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='news/img', verbose_name='фото')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='acpm.news')),
            ],
            options={
                'verbose_name': 'Фото',
                'verbose_name_plural': 'Фото',
            },
        ),
        migrations.CreateModel(
            name='Event_Images',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='event/img', verbose_name='фото')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='acpm.event')),
            ],
            options={
                'verbose_name': 'Фото',
                'verbose_name_plural': 'Фото',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(max_length=100, verbose_name='Имя')),
                ('last_name', models.CharField(max_length=100, verbose_name='Фамилия')),
                ('fatherland', models.CharField(blank=True, max_length=100, verbose_name='Отчество')),
                ('profession', models.CharField(max_length=100, verbose_name='Профессия')),
                ('date_of_Birth', models.DateField(default=django.utils.timezone.now, verbose_name='Дата Рождения')),
                ('phone', models.CharField(max_length=50, unique=True, verbose_name='Номер Телефона')),
                ('address', models.CharField(max_length=100, verbose_name='Адрес')),
                ('city', models.CharField(max_length=100, verbose_name='Город')),
                ('country', models.CharField(max_length=100, verbose_name='Страна')),
                ('place_of_work', models.CharField(max_length=100, verbose_name='Место Работы')),
                ('job', models.CharField(max_length=100, verbose_name='Должность')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
